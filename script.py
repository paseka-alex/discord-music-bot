import discord
import yt_dlp
import spotipy
from discord.ext import commands
from spotipy.oauth2 import SpotifyClientCredentials
from urllib.parse import quote
from dotenv import load_dotenv
import os
import random  # –î–æ–±–∞–≤—å—Ç–µ –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

bot = discord.Bot()
testGuild = 1208821228845006918
music = discord.SlashCommandGroup("play", "Music player related commands")
player = discord.SlashCommandGroup("player", "Player control commands")

# Spotify credentials –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
spotify_client_id = os.getenv('SPOTIFY_CLIENT_ID')
spotify_client_secret = os.getenv('SPOTIFY_CLIENT_SECRET')

# A dictionary to store queues for each guild
queues = {}

class SongSelectView(discord.ui.View):
    def __init__(self, tracks, ctx):
        super().__init__(timeout=60)
        self.tracks = tracks
        self.ctx = ctx
        
        select = discord.ui.Select(
            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–∫ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è",
            options=[
                discord.SelectOption(
                    label=f"{track['title'][:80]}...",
                    description=f"by {track['uploader'][:80]}",
                    value=str(i)
                ) for i, track in enumerate(tracks[:25])
            ]
        )
        
        async def select_callback(interaction):
            # –°—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
            await interaction.response.defer(ephemeral=True)
            
            if interaction.user != self.ctx.author:
                await interaction.followup.send("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ –º–µ–Ω—é!", ephemeral=True)
                return
            
            selected_track = self.tracks[int(select.values[0])]
            guild_id = interaction.guild_id
            
            if guild_id not in queues:
                queues[guild_id] = []
            
            try:
                ydl_opts = {
                    'format': 'bestaudio/best',
                    'quiet': True,
                    'no_warnings': True,
                    'extract_flat': False,
                }
                
                with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                    info = ydl.extract_info(selected_track["webpage_url"], download=False)
                    track_data = {
                        "url": info['url'],
                        "title": info.get('title', selected_track["title"]),
                        "uploader": info.get('uploader', selected_track["uploader"]),
                        "thumbnail": info.get('thumbnail', selected_track.get("thumbnail")),
                        "channel": self.ctx.channel
                    }
                
                queues[guild_id].append(track_data)
                
                embed = discord.Embed(description=f"üéµ **–¢—Ä–µ–∫ {track_data['title']} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å!**", color=discord.Color.green())
                await interaction.followup.send(embed=embed, ephemeral=True)
                
                if not interaction.guild.voice_client.is_playing():
                    await play_next_track(interaction.guild)
                
                try:
                    await interaction.message.delete()
                except discord.NotFound:
                    pass
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                    
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–µ–∫–µ: {e}")
                await interaction.followup.send("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç—Ä–µ–∫–∞", ephemeral=True)
        
        select.callback = select_callback
        self.add_item(select)

@music.command(name="search", description="–ü–æ–∏—Å–∫ –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Ç—Ä–µ–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é")
async def search(ctx, query: str):
    """–ü–æ–∏—Å–∫ –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Ç—Ä–µ–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"""
    if not ctx.author.voice:
        embed = discord.Embed(description="‚ùå **–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É!**", color=discord.Color.red())
        await ctx.respond(embed=embed)
        return

    voice_channel = ctx.author.voice.channel
    if ctx.voice_client is None:
        await voice_channel.connect()

    embed_loading = discord.Embed(description="üîÑ **–ü–æ–∏—Å–∫ —Ç—Ä–µ–∫–æ–≤, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...**", color=discord.Color.yellow())
    await ctx.respond(embed=embed_loading, ephemeral=True)

    try:
        ydl_opts = {
            'format': 'bestaudio/best',
            'quiet': True,
            'extract_flat': True,
            'no_warnings': True,
        }
        
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            search_results = ydl.extract_info(f"ytsearch10:{query}", download=False)
            
            if not search_results.get('entries'):
                embed_error = discord.Embed(description="‚ùå **–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!**", color=discord.Color.red())
                await ctx.edit(embed=embed_error)
                return
                
            tracks = []
            for entry in search_results['entries']:
                if entry:
                    track = {
                        "webpage_url": entry.get('url', ''),  # URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤–∏–¥–µ–æ
                        "title": entry.get('title', 'Unknown Title'),
                        "uploader": entry.get('uploader', 'Unknown Artist'),
                        "thumbnail": entry.get('thumbnail', None),
                    }
                    tracks.append(track)
            
            embed = discord.Embed(
                title="üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞",
                description="–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–∫ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:",
                color=discord.Color.blue()
            )
            
            view = SongSelectView(tracks, ctx)
            await ctx.edit(embed=embed, view=view)

    except Exception as e:
        embed_error = discord.Embed(description=f"‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {str(e)}**", color=discord.Color.red())
        await ctx.edit(embed=embed_error)

class SongButtonView(discord.ui.View):
    def __init__(self, guild_id):
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º timeout=None –¥–ª—è –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∂–∏–∑–Ω–∏ –∫–Ω–æ–ø–æ–∫
        super().__init__(timeout=None)
        self.guild_id = guild_id

    @discord.ui.button(emoji="‚èØÔ∏è", row=0, style=discord.ButtonStyle.success)
    async def pause_resume(self, button: discord.ui.Button, interaction: discord.Interaction):
        try:
            vc = interaction.guild.voice_client
            if not vc:
                await interaction.response.send_message("‚ùå –ë–æ—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É!", ephemeral=True)
                return
                
            if vc.is_playing():
                vc.pause()
                embed = discord.Embed(description="‚è∏Ô∏è **–ü–∞—É–∑–∞**", color=discord.Color.orange())
                await interaction.response.send_message(embed=embed, ephemeral=True)
            elif vc.is_paused():
                vc.resume()
                embed = discord.Embed(description="‚ñ∂Ô∏è **–í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–æ**", color=discord.Color.green())
                await interaction.response.send_message(embed=embed, ephemeral=True)
            else:
                await interaction.response.send_message("‚ùå –°–µ–π—á–∞—Å –Ω–∏—á–µ–≥–æ –Ω–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è!", ephemeral=True)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏ pause/resume: {e}")
            await interaction.response.send_message("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã", ephemeral=True)

    @discord.ui.button(emoji="‚èπÔ∏è", row=0, style=discord.ButtonStyle.danger)
    async def stop(self, button: discord.ui.Button, interaction: discord.Interaction):
        vc = interaction.guild.voice_client
        if vc.is_playing() or vc.is_paused():
            vc.stop()
            queues[self.guild_id] = []  # Clear the queue
            embed = discord.Embed(description="‚èπÔ∏è **–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ**", color=discord.Color.red())
            await interaction.response.send_message(embed=embed, ephemeral=True)
            try:
                await interaction.message.delete()
            except discord.NotFound:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    @discord.ui.button(emoji="‚è≠Ô∏è", style=discord.ButtonStyle.secondary)
    async def skip(self, button: discord.ui.Button, interaction: discord.Interaction):
        if not interaction.guild.voice_client:
            await interaction.response.send_message("‚ùå –ë–æ—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É!", ephemeral=True)
            return
            
        if not interaction.guild.voice_client.is_playing():
            await interaction.response.send_message("‚ùå –°–µ–π—á–∞—Å –Ω–∏—á–µ–≥–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç!", ephemeral=True)
            return
            
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç—Ä–µ–∫
        interaction.guild.voice_client.stop()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–ø—É—Å–∫–µ —Ç—Ä–µ–∫–∞
        await interaction.response.send_message("‚è≠Ô∏è **–¢—Ä–µ–∫ –ø—Ä–æ–ø—É—â–µ–Ω!**", ephemeral=True)
        
        # –ù–ï –≤—ã–∑—ã–≤–∞–µ–º play_next_track –∑–¥–µ—Å—å, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω –≤ callback after_playing

    @discord.ui.button(label="üìù –û—á–µ—Ä–µ–¥—å —Ç—Ä–µ–∫–æ–≤", row=1, style=discord.ButtonStyle.primary)
    async def show_queue(self, button: discord.ui.Button, interaction: discord.Interaction):
        if interaction.guild:
            guild = interaction.guild
            if guild.id in queues and queues[guild.id]:
                # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü
                tracks_per_page = 10
                queue_tracks = queues[guild.id]
                total_tracks = len(queue_tracks)
                total_pages = (total_tracks + tracks_per_page - 1) // tracks_per_page
                
                class QueueView(discord.ui.View):
                    def __init__(self):
                        super().__init__(timeout=60)
                        self.current_page = 0
                    
                    def create_embed(self, page):
                        start_idx = page * tracks_per_page
                        end_idx = min(start_idx + tracks_per_page, total_tracks)
                        
                        embed = discord.Embed(
                            title="–¢–µ–∫—É—â–∞—è –æ—á–µ—Ä–µ–¥—å —Ç—Ä–µ–∫–æ–≤",
                            description=f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}/{total_pages}",
                            color=discord.Color.blue()
                        )
                        
                        for idx, track in enumerate(queue_tracks[start_idx:end_idx], start=start_idx + 1):
                            track_title = track['title']
                            track_uploader = track['uploader']
                            
                            # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
                            if len(track_title) > 50:
                                track_title = track_title[:47] + "..."
                            if len(track_uploader) > 30:
                                track_uploader = track_uploader[:27] + "..."
                            
                            embed.add_field(
                                name=f"{idx}. {track_title}",
                                value=f"–ê—Ä—Ç–∏—Å—Ç: {track_uploader}",
                                inline=False
                            )
                        
                        embed.set_footer(text=f"–í—Å–µ–≥–æ —Ç—Ä–µ–∫–æ–≤: {total_tracks}")
                        return embed
                    
                    @discord.ui.button(emoji="‚óÄÔ∏è", style=discord.ButtonStyle.secondary)
                    async def previous_page(self, button: discord.ui.Button, interaction: discord.Interaction):
                        self.current_page = (self.current_page - 1) % total_pages
                        await interaction.response.edit_message(embed=self.create_embed(self.current_page), view=self)
                    
                    @discord.ui.button(emoji="‚ñ∂Ô∏è", style=discord.ButtonStyle.secondary)
                    async def next_page(self, button: discord.ui.Button, interaction: discord.Interaction):
                        self.current_page = (self.current_page + 1) % total_pages
                        await interaction.response.edit_message(embed=self.create_embed(self.current_page), view=self)
                
                queue_view = QueueView()
                await interaction.response.send_message(
                    embed=queue_view.create_embed(0),
                    view=queue_view if total_pages > 1 else None,
                    ephemeral=True
                )
            else:
                await interaction.response.send_message("–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞.", ephemeral=True)
        else:
            await interaction.response.send_message("–î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥–∏–ª—å–¥–∏–∏ (—Å–µ—Ä–≤–µ—Ä–µ).", ephemeral=True)

    @discord.ui.button(emoji="üîÄ", row=1, style=discord.ButtonStyle.secondary)
    async def shuffle(self, button: discord.ui.Button, interaction: discord.Interaction):
        if self.guild_id not in queues or not queues[self.guild_id]:
            await interaction.response.send_message("‚ùå –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞!", ephemeral=True)
            return
            
        random.shuffle(queues[self.guild_id])
            
        embed = discord.Embed(description="üîÄ **–û—á–µ—Ä–µ–¥—å –ø–µ—Ä–µ–º–µ—à–∞–Ω–∞!**", color=discord.Color.blue())
        await interaction.response.send_message(embed=embed, ephemeral=True)

    @discord.ui.button(emoji="üóëÔ∏è", row=1, style=discord.ButtonStyle.secondary)
    async def clear(self, button: discord.ui.Button, interaction: discord.Interaction):
        if self.guild_id not in queues or not queues[self.guild_id]:
            await interaction.response.send_message("‚ùå –û—á–µ—Ä–µ–¥—å —É–∂–µ –ø—É—Å—Ç–∞!", ephemeral=True)
            return
            
        queues[self.guild_id] = []
            
        embed = discord.Embed(description="üóëÔ∏è **–û—á–µ—Ä–µ–¥—å –æ—á–∏—â–µ–Ω–∞!**", color=discord.Color.blue())
        await interaction.response.send_message(embed=embed, ephemeral=True)

@player.command(name="stop", description="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ")
async def stop_command(ctx):
    if not ctx.voice_client:
        await ctx.respond("‚ùå –ë–æ—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É!", ephemeral=True)
        return
        
    vc = ctx.voice_client
    if vc.is_playing() or vc.is_paused():
        vc.stop()
        queues[ctx.guild.id] = []  # Clear the queue
        embed = discord.Embed(description="‚èπÔ∏è **–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ**", color=discord.Color.red())
        await ctx.respond(embed=embed, ephemeral=True)
    else:
        await ctx.respond("‚ùå –°–µ–π—á–∞—Å –Ω–∏—á–µ–≥–æ –Ω–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è!", ephemeral=True)

@player.command(name="pause", description="–ü–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –ø–∞—É–∑—É/–≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ")
async def pause_resume_command(ctx):
    if not ctx.voice_client:
        await ctx.respond("‚ùå –ë–æ—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É!", ephemeral=True)
        return
        
    vc = ctx.voice_client
    if vc.is_playing():
        vc.pause()
        embed = discord.Embed(description="‚è∏Ô∏è **–ü–∞—É–∑–∞**", color=discord.Color.orange())
        await ctx.respond(embed=embed, ephemeral=True)
    elif vc.is_paused():
        vc.resume()
        embed = discord.Embed(description="‚ñ∂Ô∏è **–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–æ**", color=discord.Color.green())
        await ctx.respond(embed=embed, ephemeral=True)
    else:
        await ctx.respond("‚ùå –°–µ–π—á–∞—Å –Ω–∏—á–µ–≥–æ –Ω–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è!", ephemeral=True)

@player.command(name="skip", description="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ç—Ä–µ–∫")
async def skip_command(ctx):
    if not ctx.voice_client:
        await ctx.respond("‚ùå –ë–æ—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É!", ephemeral=True)
        return
        
    vc = ctx.voice_client
    if vc.is_playing():
        vc.stop()
        embed = discord.Embed(description="‚è≠Ô∏è **–¢—Ä–µ–∫ –ø—Ä–æ–ø—É—â–µ–Ω**", color=discord.Color.blue())
        await ctx.respond(embed=embed, ephemeral=True)
        await play_next_track(ctx.guild)
    else:
        await ctx.respond("‚ùå –°–µ–π—á–∞—Å –Ω–∏—á–µ–≥–æ –Ω–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è!", ephemeral=True)

@player.command(name="queue", description="–ü–æ–∫–∞–∑–∞—Ç—å –æ—á–µ—Ä–µ–¥—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è")
async def queue_command(ctx):
    if ctx.guild.id in queues and queues[ctx.guild.id]:
        embed = discord.Embed(
            title="–¢–µ–∫—É—â–∞—è –æ—á–µ—Ä–µ–¥—å —Ç—Ä–µ–∫–æ–≤",
            description="–°–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏:",
            color=discord.Color.blue()
        )
        
        for idx, track in enumerate(queues[ctx.guild.id]):
            embed.add_field(
                name=f"{idx + 1}. {track['title']}",
                value=f"Uploader: {track['uploader']}",
                inline=False
            )
            
        await ctx.respond(embed=embed, ephemeral=True)
    else:
        await ctx.respond("–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞.", ephemeral=True)

@player.command(name="shuffle", description="–ü–µ—Ä–µ–º–µ—à–∞—Ç—å —Ç—Ä–µ–∫–∏ –≤ –æ—á–µ—Ä–µ–¥–∏")
async def shuffle_command(ctx):
    """–ü–µ—Ä–µ–º–µ—à–∞—Ç—å —Ç—Ä–µ–∫–∏ –≤ –æ—á–µ—Ä–µ–¥–∏"""
    if ctx.guild.id not in queues or not queues[ctx.guild.id]:
        await ctx.respond("‚ùå –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞!", ephemeral=True)
        return
    
    # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Ç—Ä–µ–∫–∏
    random.shuffle(queues[ctx.guild.id])
    
    embed = discord.Embed(description="üîÄ **–û—á–µ—Ä–µ–¥—å –ø–µ—Ä–µ–º–µ—à–∞–Ω–∞!**", color=discord.Color.blue())
    await ctx.respond(embed=embed, ephemeral=True)

@player.command(name="clear", description="–û—á–∏—Å—Ç–∏—Ç—å –æ—á–µ—Ä–µ–¥—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è")
async def clear_command(ctx):
    """–û—á–∏—Å—Ç–∏—Ç—å –æ—á–µ—Ä–µ–¥—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è"""
    if ctx.guild.id not in queues or not queues[ctx.guild.id]:
        await ctx.respond("‚ùå –û—á–µ—Ä–µ–¥—å —É–∂–µ –ø—É—Å—Ç–∞!", ephemeral=True)
        return
    
    queues[ctx.guild.id] = []  # –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å
    
    embed = discord.Embed(description="üóëÔ∏è **–û—á–µ—Ä–µ–¥—å –æ—á–∏—â–µ–Ω–∞!**", color=discord.Color.blue())
    await ctx.respond(embed=embed, ephemeral=True)

@bot.event
async def on_ready():
    print(f"–ë–æ—Ç {bot.user.name} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")

@bot.event
async def on_guild_join(guild):
    embed = discord.Embed(
        title="–ü—Ä–∏–≤–µ—Ç!",
        description=f"–°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä **{guild.name}**! üéâ",
        color=discord.Color.green()
    )
    embed.add_field(
        name="–ß—Ç–æ —è –º–æ–≥—É —Å–¥–µ–ª–∞—Ç—å?",
        value="–Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ–º –º—É–∑—ã–∫–∏ —Å YouTube –∏ Spotify. –ü—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –Ω–∏–∂–µ:",
        inline=False
    )
    embed.add_field(
        name="–ö–æ–º–∞–Ω–¥—ã:",
        value="`/play url <URL>` - –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ —Ç—Ä–µ–∫ —Å YouTube –∏–ª–∏ Spotify.\n`/play playlist <URL>` - –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –ø–ª–µ–π–ª–∏—Å—Ç —Å YouTube –∏–ª–∏ Spotify.\n`/play search <query>` - –ü–æ–∏—Å–∫ –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Ç—Ä–µ–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é",
        inline=False
    )
    embed.set_footer(text="–ù–∞–¥–µ—é—Å—å, –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è —Å–æ –º–Ω–æ–π —Ä–∞–±–æ—Ç–∞—Ç—å! üé∂")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –∫–∞–Ω–∞–ª
    target_channel = None
    if guild.system_channel and guild.system_channel.permissions_for(guild.me).send_messages:
        target_channel = guild.system_channel
    else:
        # –ò—â–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª
        for channel in guild.text_channels:
            if channel.permissions_for(guild.me).send_messages:
                target_channel = channel
                break

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª
    if target_channel:
        try:
            await target_channel.send(embed=embed)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ {guild.name}: {e}")
    else:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–π –∫–∞–Ω–∞–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ {guild.name}")

# –°–æ–∑–¥–∞–Ω–∏–µ slash-–∫–æ–º–∞–Ω–¥—ã
@bot.slash_command(name="help", description="–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.")
async def help_command(ctx: discord.ApplicationContext):
    embed = discord.Embed(
        title="–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º",
        description="–í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:",
        color=discord.Color.blue()
    )

    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    embed.add_field(name="üìã    –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã", value="_ _", inline=False)
    embed.add_field(name="/help", value="–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.", inline=False)
    
    # –ö–æ–º–∞–Ω–¥—ã –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
    embed.add_field(name="üéµ    –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ", value="_ _", inline=False)
    embed.add_field(name="/play url <URL>", value="–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ —Ç—Ä–µ–∫ —Å YouTube –∏–ª–∏ Spotify.", inline=False)
    embed.add_field(name="/play playlist <URL>", value="–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –ø–ª–µ–π–ª–∏—Å—Ç —Å YouTube –∏–ª–∏ Spotify.", inline=False)
    embed.add_field(name="/play search <query>", value="–ü–æ–∏—Å–∫ –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Ç—Ä–µ–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é.", inline=False)
    
    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–ª–µ–µ—Ä–æ–º
    embed.add_field(name="‚öôÔ∏è    –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–ª–µ–µ—Ä–æ–º", value="_ _", inline=False)
    embed.add_field(name="/player stop", value="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ.", inline=False)
    embed.add_field(name="/player pause", value="–ü–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –ø–∞—É–∑—É/–≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ.", inline=False)
    embed.add_field(name="/player skip", value="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ç—Ä–µ–∫.", inline=False)
    embed.add_field(name="/player queue", value="–ü–æ–∫–∞–∑–∞—Ç—å –æ—á–µ—Ä–µ–¥—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è.", inline=False)
    embed.add_field(name="/player shuffle", value="–ü–µ—Ä–µ–º–µ—à–∞—Ç—å —Ç—Ä–µ–∫–∏ –≤ –æ—á–µ—Ä–µ–¥–∏.", inline=False)
    embed.add_field(name="/player clear", value="–û—á–∏—Å—Ç–∏—Ç—å –æ—á–µ—Ä–µ–¥—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è.", inline=False)

    embed.set_footer(text="–ù–∞–¥–µ—é—Å—å, –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è —Ä–∞–±–æ—Ç–∞—Ç—å —Å –±–æ—Ç–æ–º! üé∂")

    await ctx.respond(embed=embed)

async def play_next_track(guild):
    """Play the next track in the queue for a guild."""
    if not guild.id in queues or not queues[guild.id]:
        return

    vc = guild.voice_client
    if not vc or not vc.is_connected():
        return

    try:
        next_track = queues[guild.id].pop(0)
        
        # –ï—Å–ª–∏ —Ç—Ä–µ–∫ —Ç—Ä–µ–±—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏, –ø–æ–ª—É—á–∞–µ–º –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É
        if next_track.get("needs_processing"):
            try:
                ydl_opts = {
                    'format': 'bestaudio/best',
                    'quiet': True,
                    'no_warnings': True,
                }
                
                with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                    if "search_query" in next_track:  # –î–ª—è —Ç—Ä–µ–∫–æ–≤ Spotify
                        info = ydl.extract_info(f"ytsearch:{next_track['search_query']}", download=False)
                        if 'entries' in info:
                            video_info = info['entries'][0]
                    else:  # –î–ª—è —Ç—Ä–µ–∫–æ–≤ YouTube
                        video_info = ydl.extract_info(next_track['webpage_url'], download=False)
                    
                    next_track['url'] = video_info['url']
                    
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ URL —Ç—Ä–µ–∫–∞: {e}")
                await play_next_track(guild)  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–π —Ç—Ä–µ–∫
                return

        FFMPEG_OPTIONS = {
            'before_options': '-reconnect 1 -reconnect_streamed 1 -reconnect_delay_max 5 -probesize 200M',
            'options': '-vn'
        }
        
        source = discord.FFmpegPCMAudio(next_track["url"], **FFMPEG_OPTIONS)
        source = discord.PCMVolumeTransformer(source)
        
        def after_playing(error):
            if error:
                print(f"–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è: {error}")
            
            async def cleanup():
                if "message" in next_track and next_track["message"]:
                    try:
                        await next_track["message"].delete()
                    except:
                        pass
                await play_next_track(guild)
            
            bot.loop.create_task(cleanup())
        
        vc.play(source, after=after_playing)
        
        embed = discord.Embed(title="–°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç üé∂", color=discord.Color.blue())
        embed.add_field(name="–ù–∞–∑–≤–∞–Ω–∏–µ", value=next_track["title"], inline=False)
        embed.add_field(name="–ê—Ä—Ç–∏—Å—Ç", value=next_track["uploader"], inline=False)
        if next_track.get("thumbnail"):
            embed.set_thumbnail(url=next_track["thumbnail"])
        
        next_track["message"] = await next_track["channel"].send(
            embed=embed,
            view=SongButtonView(guild.id)
        )

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏ —Ç—Ä–µ–∫–∞: {e}")
        await play_next_track(guild)


# Spotify search function to get the YouTube link
def get_spotify_track_url(spotify_url):
    sp = spotipy.Spotify(auth_manager=SpotifyClientCredentials(client_id=spotify_client_id, client_secret=spotify_client_secret))
    track_info = sp.track(spotify_url)
    track_name = track_info['name']
    artist_name = track_info['artists'][0]['name']
    search_query = f"{track_name} {artist_name}"
    thumbnail_url = track_info['album']['images'][0]['url']

    # Use yt_dlp to find YouTube video
    ydl_opts = {
        'format': 'bestaudio/best',
        'quiet': True,
    }
    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
        search_result = ydl.extract_info(f"ytsearch:{search_query}", download=False)
        if 'entries' in search_result:
            video_url = search_result['entries'][0]['url']
            return video_url, track_name, artist_name, thumbnail_url
    return None, None, None

@music.command()
async def url(ctx, link: str):
    """–î–æ–±–∞–≤–∏—Ç—å –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ —Ç—Ä–µ–∫ —Å YouTube –∏–ª–∏ Spotify"""
    if not ctx.author.voice:
        embed = discord.Embed(description="‚ùå **–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É!**", color=discord.Color.red())
        await ctx.respond(embed=embed)
        return

    voice_channel = ctx.author.voice.channel
    if ctx.voice_client is None:
        await voice_channel.connect()

    guild_id = ctx.guild.id
    if guild_id not in queues:
        queues[guild_id] = []

    embed_loading = discord.Embed(description="üîÑ **–ó–∞–≥—Ä—É–∑–∫–∞ —Ç—Ä–µ–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...**", color=discord.Color.yellow())
    await ctx.respond(embed=embed_loading, ephemeral=True)

    try:
        if "spotify.com" in link:
            if "open.spotify.com" not in link:
                embed_error = discord.Embed(description="‚ùå **–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ Spotify! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É.**", color=discord.Color.red())
                await ctx.edit(embed=embed_error)
                return
                
            video_url, track_name, artist_name, thumbnail = get_spotify_track_url(link)
            if video_url:
                track = {
                    "url": video_url,
                    "title": track_name,
                    "uploader": artist_name,
                    "thumbnail": thumbnail,
                    "channel": ctx.channel
                }
        else:
            if "youtube.com" not in link and "youtu.be" not in link and "music.youtube.com" not in link:
                embed_error = discord.Embed(description="‚ùå **–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É YouTube –∏–ª–∏ Spotify.**", color=discord.Color.red())
                await ctx.edit(embed=embed_error)
                return
                
            ydl_opts = {
                'format': 'bestaudio/best',
                'quiet': True,
            }
            with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                info = ydl.extract_info(link, download=False)
                track = {
                    "url": info['url'],
                    "title": info.get('title', 'Unknown Title'),
                    "uploader": info.get('uploader', 'Unknown Artist'),
                    "thumbnail": info.get('thumbnail', None),
                    "channel": ctx.channel
                }

        queues[guild_id].append(track)

        if not ctx.voice_client.is_playing():
            await play_next_track(ctx.guild)

        embed_added = discord.Embed(description=f"üéµ **–¢—Ä–µ–∫ {track['title']} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å!**", color=discord.Color.green())
        await ctx.edit(embed=embed_added)

    except Exception as e:
        embed_error = discord.Embed(description=f"‚ùå **–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–µ–∫–∞: {e}**", color=discord.Color.red())
        await ctx.edit(embed=embed_error)

@music.command()
async def playlist(ctx, link: str):
    """–î–æ–±–∞–≤–∏—Ç—å –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –ø–ª–µ–π–ª–∏—Å—Ç —Å YouTube –∏–ª–∏ Spotify"""
    if not ctx.author.voice:
        embed = discord.Embed(description="‚ùå **–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É!**", color=discord.Color.red())
        await ctx.respond(embed=embed)
        return

    voice_channel = ctx.author.voice.channel
    if ctx.voice_client is None:
        await voice_channel.connect()

    guild_id = ctx.guild.id
    if guild_id not in queues:
        queues[guild_id] = []

    embed_loading = discord.Embed(description="üîÑ **–ó–∞–≥—Ä—É–∑–∫–∞ –ø–ª–µ–π–ª–∏—Å—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...**", color=discord.Color.yellow())
    await ctx.respond(embed=embed_loading, ephemeral=True)

    try:
        if "spotify.com" in link:
            if "open.spotify.com" not in link:
                embed_error = discord.Embed(description="‚ùå **–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ Spotify! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É.**", color=discord.Color.red())
                await ctx.edit(embed=embed_error)
                return

            sp = spotipy.Spotify(auth_manager=SpotifyClientCredentials(client_id=spotify_client_id, client_secret=spotify_client_secret))
            
            if "playlist" in link:
                playlist_id = link.split('playlist/')[1].split('?')[0]
                results = sp.playlist_tracks(playlist_id)
                tracks = results['items']
                
                for track in tracks:
                    track_info = track['track']
                    track_data = {
                        "search_query": f"{track_info['name']} {track_info['artists'][0]['name']}",
                        "title": track_info['name'],
                        "uploader": track_info['artists'][0]['name'],
                        "thumbnail": track_info['album']['images'][0]['url'] if track_info['album']['images'] else None,
                        "channel": ctx.channel,
                        "needs_processing": True  # –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π —á—Ç–æ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å URL
                    }
                    queues[guild_id].append(track_data)

        else:
            if "youtube.com" not in link and "youtu.be" not in link:
                embed_error = discord.Embed(description="‚ùå **–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É YouTube –∏–ª–∏ Spotify.**", color=discord.Color.red())
                await ctx.edit(embed=embed_error)
                return

            ydl_opts = {
                'format': 'bestaudio/best',
                'quiet': True,
                'extract_flat': True,
                'ignoreerrors': True,
            }
            
            with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                playlist_info = ydl.extract_info(link, download=False)
                if 'entries' in playlist_info:
                    for entry in playlist_info['entries']:
                        if entry is None:
                            continue
                        track = {
                            "webpage_url": entry['url'],  # URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤–∏–¥–µ–æ
                            "title": entry.get('title', 'Unknown Title'),
                            "uploader": entry.get('uploader', 'Unknown Artist'),
                            "thumbnail": entry.get('thumbnail', None),
                            "channel": ctx.channel,
                            "needs_processing": True  # –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π —á—Ç–æ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É
                        }
                        queues[guild_id].append(track)

        total_tracks = len(queues[guild_id])
        embed_added = discord.Embed(
            description=f"üéµ **–ü–ª–µ–π–ª–∏—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å! –î–æ–±–∞–≤–ª–µ–Ω–æ {total_tracks} —Ç—Ä–µ–∫–æ–≤.**",
            color=discord.Color.green()
        )
        await ctx.edit(embed=embed_added)

        # –ù–∞—á–∏–Ω–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç
        if not ctx.voice_client.is_playing():
            await play_next_track(ctx.guild)

    except Exception as e:
        embed_error = discord.Embed(description=f"‚ùå **–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–ª–µ–π–ª–∏—Å—Ç–∞: {e}**", color=discord.Color.red())
        await ctx.edit(embed=embed_error)

bot.add_application_command(music)
bot.add_application_command(player)

bot.run(os.getenv('DISCORD_TOKEN'))
